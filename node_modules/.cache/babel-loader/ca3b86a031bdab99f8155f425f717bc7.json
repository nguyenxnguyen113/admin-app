{"ast":null,"code":"import axios from \"../helpers.js/axios\";\nimport { authConstants } from \"./constants\";\nexport const login = user => {\n  console.log(user);\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(`/admin/signin`, { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: 'Failed to login'\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({\n        type: authConstants.LOGOUT_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/nguyenxuannguyen/movie-mern/admin-app/src/actions/auth.actions.js"],"names":["axios","authConstants","login","user","console","log","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"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","sourcesContent":["import axios from \"../helpers.js/axios\";\nimport { authConstants } from \"./constants\";\n\nexport const login = (user) => {\n\n  console.log(user)\n\n  return async (dispatch) => {\n\n    dispatch({ type: authConstants.LOGIN_REQUEST });\n    const res = await axios.post(`/admin/signin`, {\n      ...user\n    });\n\n    if (res.status === 200) {\n      const { token, user } = res.data;\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token, user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: { error: res.data.error }\n        });\n      }\n    }\n  }\n}\n\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token, user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: { error: 'Failed to login' }\n      });\n    }\n  }\n}\n\nexport const signout = () => {\n  return async dispatch => {\n\n    dispatch({ type: authConstants.LOGOUT_REQUEST });\n    const res = await axios.post(`/admin/signout`);\n\n    if (res.status === 200) {\n      localStorage.clear();\n      dispatch({ type: authConstants.LOGOUT_SUCCESS });\n    } else {\n      dispatch({\n        type: authConstants.LOGOUT_FAILURE,\n        payload: { error: res.data.error }\n      });\n    }\n\n\n  }\n}"]},"metadata":{},"sourceType":"module"}