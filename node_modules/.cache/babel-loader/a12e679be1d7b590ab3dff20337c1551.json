{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categoryList: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId === undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      type: category.type,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        type: category.type,\n        children: []\n      };\n      myCategories.push({ ...cat,\n        children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n      console.log('updated categoires', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState,\n        loading: false,\n        error: action.payload.error\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/nguyenxuannguyen/movie-mern/admin-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categoryList","loading","error","buildNewCategories","parentId","categories","category","myCategories","undefined","_id","name","slug","type","children","cat","newCategory","push","length","state","action","console","log","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","payload","updatedCategories","ADD_NEW_CATEGORY_FAILURE"],"mappings":"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","sourcesContent":["import { categoryConstants } from \"../actions/constants\";\n\nconst initState = {\n    categoryList: [],\n    loading: false,\n    error: null\n}\nconst buildNewCategories = (parentId, categories, category) => {\n    let myCategories = [];\n\n    if (parentId === undefined) {\n        return [\n            ...categories,\n            {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n                type: category.type,\n                children: []\n            }\n        ];\n    }\n\n    for (let cat of categories) {\n\n        if (cat._id == parentId) {\n            const newCategory = {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n                parentId: category.parentId,\n                type: category.type,\n                children: []\n            };\n            myCategories.push({\n                ...cat,\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n            })\n        } else {\n            myCategories.push({\n                ...cat,\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n            });\n        }\n    }\n    return myCategories;\n}\nexport default (state = initState, action) => {\n\n    console.log(action);\n\n    switch (action.type) {\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n            const category = action.payload.category;\n            const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\n            console.log('updated categoires', updatedCategories);\n\n            state = {\n                ...state,\n                categories: updatedCategories,\n                loading: false,\n            }\n            break;\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n            state = {\n                ...initState,\n                loading: false,\n                error: action.payload.error\n            }\n            break;\n    }\n    return state;\n}"]},"metadata":{},"sourceType":"module"}