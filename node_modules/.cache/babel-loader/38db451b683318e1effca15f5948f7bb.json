{"ast":null,"code":"import { categoryConstansts } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        children: []\n      };\n      myCategories.push({ ...cat,\n        newCategory\n      });\n    } else {\n      myCategories.push({ ...cat\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(state.categories, category);\n      console.log('updated categoires', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState,\n        loading: false,\n        error: action.payload.error\n      };\n      break;\n\n    case categoryConstansts.UPDATE_CATEGORIES_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstansts.UPDATE_CATEGORIES_SUCCESS:\n      state = { ...state,\n        loading: false\n      };\n      break;\n\n    case categoryConstansts.UPDATE_CATEGORIES_FAILURE:\n      state = { ...state,\n        error: action.payload.error,\n        loading: false\n      };\n      break;\n\n    case categoryConstansts.DELETE_CATEGORIES_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstansts.DELETE_CATEGORIES_SUCCESS:\n      state = { ...state,\n        loading: false\n      };\n      break;\n\n    case categoryConstansts.DELETE_CATEGORIES_FAILURE:\n      state = { ...state,\n        loading: false,\n        error: action.payload.error\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/nguyenxuannguyen/movie-mern/admin-app/src/reducers/category.reducer.js"],"names":["categoryConstansts","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","cat","newCategory","children","push","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE","UPDATE_CATEGORIES_REQUEST","UPDATE_CATEGORIES_SUCCESS","UPDATE_CATEGORIES_FAILURE","DELETE_CATEGORIES_REQUEST","DELETE_CATEGORIES_SUCCESS","DELETE_CATEGORIES_FAILURE"],"mappings":"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","sourcesContent":["import { categoryConstansts } from \"../actions/constants\";\n\nconst initState = {\n    categories: [],\n    loading: false,\n    error: null\n};\n\n\nconst buildNewCategories = (parentId, categories, category) => {\n    let myCategories = [];\n\n    if(parentId == undefined){\n        return [\n            ...categories,\n            {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n            }\n        ];\n    }\n    \n    for(let cat of categories){\n\n        if(cat._id == parentId){\n            const newCategory = {\n                _id: category._id,\n                name: category.name,\n                slug: category.slug,\n                parentId: category.parentId,\n                children: []\n            };\n            myCategories.push({\n                ...cat, newCategory\n            })\n        }else{\n            myCategories.push({\n                ...cat,\n                \n            });\n        }\n\n        \n    }\n\n\n    return myCategories;\n}\n\n\nexport default (state = initState, action) => {\n    switch(action.type){\n        case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\n            state = {\n                ...state,\n                categories: action.payload.categories\n            }\n            break;\n        case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\n            const category = action.payload.category;\n            const updatedCategories = buildNewCategories( state.categories, category);\n            console.log('updated categoires', updatedCategories);\n            \n            state = {\n                ...state,\n                categories: updatedCategories,\n                loading: false,\n            }\n            break;\n        case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\n            state = {\n                ...initState,\n                loading: false,\n                error: action.payload.error\n            }\n            break;\n        case categoryConstansts.UPDATE_CATEGORIES_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstansts.UPDATE_CATEGORIES_SUCCESS:\n            state = {\n                ...state,\n                loading: false\n            }\n            break;\n        case categoryConstansts.UPDATE_CATEGORIES_FAILURE:\n            state = {\n                ...state,\n                error: action.payload.error,\n                loading: false\n            }\n            break;\n        case categoryConstansts.DELETE_CATEGORIES_REQUEST:\n            state = {\n                ...state,\n                loading: true\n            }\n            break;\n        case categoryConstansts.DELETE_CATEGORIES_SUCCESS:\n            state = {\n                ...state,\n                loading: false\n            }\n            break;\n        case categoryConstansts.DELETE_CATEGORIES_FAILURE:\n            state = {\n                ...state,\n                loading: false,\n                error: action.payload.error\n            }\n            break;\n    }\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}